package main

import (
	"flag"
	"fmt"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	netPackage         = protogen.GoImportPath("net")
	fmtPackage         = protogen.GoImportPath("fmt")
	contextPackage     = protogen.GoImportPath("context")
	protoPackage       = protogen.GoImportPath("github.com/golang/protobuf/proto")
	grpcPackage        = protogen.GoImportPath("google.golang.org/grpc")
	grpcHandlerPackage = protogen.GoImportPath("github.com/carvalhorr/protoc-gen-mock/grpchandler")
	stubPackage        = protogen.GoImportPath("github.com/carvalhorr/protoc-gen-mock/stub")
	remotePackage      = protogen.GoImportPath("github.com/carvalhorr/protoc-gen-mock/remote")
	codesPackage       = protogen.GoImportPath("google.golang.org/grpc/codes")
	statusPackage      = protogen.GoImportPath("google.golang.org/grpc/status")
	deprecationComment = "// Deprecated: Do not use."
)

func main() {
	var (
		flags flag.FlagSet
		//plugins      = flags.String("plugins", "", "list of plugins to enable (supported values: grpc)")
		importPrefix = flags.String("import_prefix", "", "prefix to prepend to import paths")
	)
	importRewriteFunc := func(importPath protogen.GoImportPath) protogen.GoImportPath {
		switch importPath {
		case "context", "fmt", "math":
			return importPath
		}
		if *importPrefix != "" {
			return protogen.GoImportPath(*importPrefix) + importPath
		}
		return importPath
	}
	protogen.Options{
		ParamFunc:         flags.Set,
		ImportRewriteFunc: importRewriteFunc,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			GenerateFile(gen, f)
		}
		return nil
	})
}

// GenerateFile generates a _grpc.pb.go file containing gRPC service definitions.
func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + ".mock.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	mockGenerator := mockServicesGenerator{
		gen:  gen,
		file: file,
		g:    g,
	}
	mockGenerator.genHeader(string(file.GoPackageName))
	mockGenerator.GenerateFileContent()
	return g
}

type mockServicesGenerator struct {
	gen  *protogen.Plugin
	file *protogen.File
	g    *protogen.GeneratedFile
}

// GenerateFileContent generates the gRPC service definitions, excluding the package statement.
func (m mockServicesGenerator) GenerateFileContent() {
	if len(m.file.Services) == 0 {
		return
	}
	for _, service := range m.file.Services {
		m.genService(service)
	}
}

func (m mockServicesGenerator) genService(service *protogen.Service) {
	m.genMockServiceConstructor(service)
	for _, method := range service.Methods {
		methodHandlerName := m.getMethodHandlerName(service, method)
		m.genMockMethodHandler(service, method, methodHandlerName)
	}
}

func (m mockServicesGenerator) genHeader(packageName string) {
	m.g.P("// Code generated by protoc-gen-mock. DO NOT EDIT.")
	m.g.P()
	m.g.P("package ", packageName)
	m.g.P()
}

func (m mockServicesGenerator) genMockServiceConstructor(service *protogen.Service) {
	serviceName := m.getMockServiceName(service)
	m.g.P("func New", serviceName, "(stubsMatcher ", stubPackage.Ident("StubsMatcher"), ") ", grpcHandlerPackage.Ident("MockService"), "{")
	m.g.P("return &", unexport(serviceName), "{")
	m.g.P("StubsMatcher: stubsMatcher,")
	m.g.P("}")
	m.g.P("}")
}

func (m mockServicesGenerator) genMockMethodHandler(service *protogen.Service, method *protogen.Method, hname string) {
	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
		m.g.P("func ", hname, "(srv interface{}, ctx ", contextPackage.Ident("Context"), ", dec func(interface{}) error, interceptor ", grpcPackage.Ident("UnaryServerInterceptor"), ") (interface{}, error) {")
		m.g.P("in := new(", method.Input.GoIdent, ")")
		m.g.P("if err := dec(in); err != nil { return nil, err }")
		m.g.P("out := new(", method.Output.GoIdent, ")")
		m.g.P("fullMethod := ", m.getFullMethodName(service, method))
		m.g.P("stubsMatcher := (srv).(*", unexport(m.getMockServiceName(service)), ").StubsMatcher")
		m.g.P("return ", grpcHandlerPackage.Ident("MockHandler"), "(ctx, stubsMatcher, fullMethod, in, out)")
		m.g.P("}")
		m.g.P()
		return
	}
	m.g.P("func ", hname, "(srv interface{}, stream ", grpcPackage.Ident("ServerStream"), ") error {")
	m.g.P("// Mock not implemented for streaming")
	m.g.P("return ", fmtPackage.Ident("Errorf"), "(\"mock not implemented for streaming\")")
	m.g.P("}")
	m.g.P()
}

func (m mockServicesGenerator) getFullMethodName(service *protogen.Service, method *protogen.Method) string {
	return strconv.Quote(fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.GoName))
}

func (m mockServicesGenerator) getMockServiceName(service *protogen.Service) string {
	return service.GoName + "MockService"
}

func (m mockServicesGenerator) getRemoteMockClientName(service *protogen.Service) string {
	return service.GoName + "RemoteMockClient"
}

func (m mockServicesGenerator) getMockServerBaseInterfaceName(service *protogen.Service) string {
	return service.GoName + "Server"
}

func (m mockServicesGenerator) getMockServiceDescriptorName(service *protogen.Service) string {
	return "_" + service.GoName + "_MockServiceDesc"
}

func (m mockServicesGenerator) getMethodHandlerName(service *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("_%s_%s_MockHandler", service.GoName, method.GoName)
}

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }
